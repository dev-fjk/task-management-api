plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'jacoco'
}

group = 'api.management.task'
version = '1.0.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Springs
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-batch:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.6.3'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.3'

    // devtools
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.6.3'

    // Spring Framework
    // spring retry
    implementation 'org.springframework.retry:spring-retry:1.3.1'

    // libraries
    // lombok
    implementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // commons
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-io:commons-io:20030203.000550'

    // Data sources
    // MySQL
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'

    // h2
    runtimeOnly 'com.h2database:h2:2.1.210'

    // My Batis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.mybatis.scripting:mybatis-thymeleaf:1.0.3'

    // OpenApi Spring doc (swagger)
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.13'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
    testImplementation 'io.projectreactor:reactor-test:3.4.14'

    // MyBatis for Test
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.2'

    // Mockito
    testImplementation 'org.mockito:mockito-core:4.3.1'
    testImplementation 'org.mockito:mockito-inline:4.3.1'

    // Spock
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.spockframework:spock-spring:2.0-groovy-3.0'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'

// test
tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir') as Directory
}

// jacocoのレポートから除外するクラスファイル。ここに除外したいクラスを列挙する
def coverageExcludeFiles = [
        '**/*$*.class',
        '**/*$lambda$*.class',
        '**/config/*.java',
        'Application.java',
        '**/*Exception.class'
]

// jacocoレポートの設定
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.enabled(true)
        // htmlレポート出力先
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
    afterEvaluate {
        // ファイルの除外設定
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    excludes: coverageExcludeFiles)
        })
    }
}

